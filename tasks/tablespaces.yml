- name: Manage tablespaces location.
  ansible.builtin.file:
    path: "{{ item.location }}"
    state: directory
    owner: "{{ item.location_owner | d(postgresql_user) }}"
    group: "{{ item.location_group | d(postgresql_user) }}"
    mode: "{{ item.location_mode | d('0700') }}"
  when:
    - item.location_create | d(false)
    - (item.state | d('present')) == 'present'
  loop: "{{ postgresql_tablespaces }}"

- name: Manage tablespaces
  when: not postgresql_replication or postgresql_replication_role == "primary"
  become: true
  become_user: "{{ postgresql_user }}"
  no_log: "{{ postgres_users_no_log }}"
  vars:
    ansible_ssh_pipelining: true
    ansible_python_interpreter: "{{ _postgresql_ansible_python_interpreter }}"
  block:
    - name: Manage tablespaces.
      community.postgresql.postgresql_tablespace:
        name: "{{ item.name }}"
        state: "{{ item.state | d(omit) }}"
        rename_to: "{{ ((item.state | d('present')) == 'present') | ternary(item.rename_to | d(omit), omit) }}"
        set: "{{ ((item.state | d('present')) == 'present') | ternary(item.set | d(omit), omit) }}"
        owner: "{{ ((item.state | d('present')) == 'present') | ternary(item.owner | d(omit), omit) }}"
        location: "{{ ((item.state | d('present')) == 'present') | ternary(item.location | d(omit), omit) }}"

        # login_host: "{{ item.login_host | default('localhost') }}"
        # login_password: "{{ item.login_password | default(omit) }}"
        port: "{{ postgresql_port }}"
        login_user: "{{ item.login_user | default(postgresql_user) }}"
        login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
        # usage of all options
        ssl_mode: "{{ item.ssl_mode | d(omit) }}"
        ca_cert: "{{ item.ca_cert | d(omit) }}"
        session_role: "{{ item.session_role | d(omit) }}"
        trust_input: "{{ item.trust_input | d(omit) }}"
      register: tbspc_mgmt_res
      failed_when:
        - tbspc_mgmt_res.failed
        - not(item.state == 'absent' and 'Tries to drop nonexistent tablespace' in tbspc_mgmt_res.msg)
      loop: "{{ postgresql_tablespaces }}"
