---
- name: Ensure PostgreSQL users are configured correctly.
  community.postgresql.postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    port: "{{ postgresql_port }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    encrypted: "{{ item.encrypted | default(omit) }}"
    role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
    db: "{{ item.db | default(omit) }}"
    state: "{{ item.state | default('present') }}"
    ssl_mode: "{{ item.ssl_mode | d(omit) }}"
    ca_cert: "{{ item.ca_cert | d(omit) }}"
    fail_on_user: "{{ item.fail_on_user | d(omit) }}"
    session_role: "{{ item.session_role | d(omit) }}"
    expires: "{{ item.expires | d(omit) }}"
    no_password_changes: "{{ item.no_password_changes | d(omit) }}"
    conn_limit: "{{ item.conn_limit | d(omit) }}"
    comment: "{{ item.comment | d(omit) }}"
    trust_input: "{{ item.trust_input | d(omit) }}"
  loop: "{{ postgresql_users }}"
  loop_control:
    label: "{{ item.name }}"
  no_log: "{{ postgres_users_no_log }}"
  become: true
  become_user: "{{ postgresql_user }}"
  environment:
    PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256') | ternary('-c password_encryption=scram-sha-256', '') }}"
  vars:
    ansible_ssh_pipelining: true
    ansible_python_interpreter: "{{ _postgresql_ansible_python_interpreter }}"


- name: Manage PostgreSQL memberships.
  community.postgresql.postgresql_membership:
    groups: "{{ item.groups }}"
    target_roles: "{{ item.target_roles }}"
    state: "{{ item.state | default('present') }}"
    port: "{{ postgresql_port }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    db: "{{ item.db | default(omit) }}"
    ssl_mode: "{{ item.ssl_mode | d(omit) }}"
    ca_cert: "{{ item.ca_cert | d(omit) }}"
    fail_on_role: "{{ item.fail_on_user | d(omit) }}"
    session_role: "{{ item.session_role | d(omit) }}"
    trust_input: "{{ item.trust_input | d(omit) }}"
  loop: "{{ postgresql_memberships }}"
  no_log: "{{ postgres_users_no_log }}"
  become: true
  become_user: "{{ postgresql_user }}"
  vars:
    ansible_ssh_pipelining: true
    ansible_python_interpreter: "{{ _postgresql_ansible_python_interpreter }}"
