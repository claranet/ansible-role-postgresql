---
- name: Configure global settings.
  ansible.builtin.lineinfile:
    dest: "{{ _postgresql_config_path }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = '{{ item.value }}'"
    state: "{{ item.state | default('present') }}"
    mode: '0644'
  loop: "{{ postgresql_autotune_config_options |
    community.general.lists_mergeby(postgresql_global_config_options, 'option') |
    community.general.lists_mergeby(postgresql_global_config_options_extra, 'option') }}"
  notify: Reload postgresql

- name: Configure host based authentication (if entries are configured).
  ansible.builtin.template:
    src: "{{ postgresql_hba_template_path }}"
    dest: "{{ _postgresql_config_path }}/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    backup: true
    mode: "600"
  diff: true
  notify: Reload postgresql
# Not using the postgresql_hba module because it entailed having
# a task to ensure the file is empty of default rules
# a task to add the rules.
# The first task should only be executed once otherwise the rules
# task will also always report as changed which is not true.
# Basically it added more complications whilst the template module
# works just fine.

- name: Ensure PostgreSQL unix socket dirs exist.
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "{{ _postgresql_unix_socket_directories_mode }}"
  loop: "{{ postgresql_unix_socket_directories }}"

- name: Ensure PostgreSQL permissions are persisted accross reboots
  ansible.builtin.template:
    src: "{{ postgresql_tempfile_src_template_path }}"
    dest: "{{ postgresql_tempfile_dest_path }}"
    owner: "{{ postgresql_tempfile_owner }}"
    group: "{{ postgresql_tempfile_group }}"
    mode: "{{ postgresql_tempfile_mode }}"
  when: postgresql_persist_permissions

- name: SSl files
  block: 
    - name: Set full path for key file 
      set_fact:
        postgresql_ssl_key_file_full: "{{ _postgresql_ssl_key_file if ( _postgresql_ssl_key_file | dirname != '')  else _postgresql_data_dir ~ '/' ~ _postgresql_ssl_key_file  }}"

    - name: Set full path for cert file 
      set_fact:
        postgresql_ssl_cert_file_full: "{{ _postgresql_ssl_cert_file if ( _postgresql_ssl_cert_file | dirname != '')  else _postgresql_data_dir ~ '/' ~ _postgresql_ssl_cert_file  }}"

    - name: Stat CA private key
      stat: path="{{ postgresql_ssl_key_file_full }}"
      register: postgresql_ssl_key_file_stat

    - name: Create CA private key
      command: >
        openssl genrsa
        -out "{{ postgresql_ssl_key_file_full }}"
        4096
      args:
        creates: "{{ postgresql_ssl_key_file_full }}"
      when: not postgresql_ssl_key_file_stat.stat.exists

    - name: Stat CA cert
      stat: path="{{ postgresql_ssl_cert_file_full }}"
      register: postgresql_ssl_cert_file_stat

    - name: Create CA cert
      command: >
        openssl req -new -x509 -days 36500
        -subj "/C=FR/ST=FR/L=Rennes"
        -key "{{ postgresql_ssl_key_file_full }}"     
        -outform PEM -out "{{ postgresql_ssl_cert_file_full }}"
#      args:
#        creates: "{{ postgresql_ssl_cert_file_full }}"
      when: not postgresql_ssl_key_file_stat.stat.exists or not postgresql_ssl_cert_file_stat.stat.exists

    - name: Set owner on key file
      file:
        path: "{{ postgresql_ssl_key_file_full }}"
        owner: postgres
        group: postgres
      when: _postgresql_ssl_key_file | dirname == ''

    - name: Set owner on cert file
      file:
        path: "{{ postgresql_ssl_cert_file_full }}"
        owner: postgres
        group: postgres
      when: _postgresql_ssl_cert_file | dirname == ''

    - name: Set permission on private key file
      file:
        path: "{{ postgresql_ssl_key_file_full }}"
        mode: '0400'
      when: _postgresql_ssl_key_file | dirname == ''

    - name: Set permission on cert file
      file:
        path: "{{ postgresql_ssl_cert_file_full }}"
        mode: '0666'
      when: _postgresql_ssl_cert_file | dirname == ''
  become: true
  when: postgresql_ca_enabled

- name: Set postgresql service enabled and started state
  ansible.builtin.service:
    name: "{{ _postgresql_daemon }}"
    enabled: "{{ postgresql_service_enabled }}"
    state: "{{ _postgresql_service_state | d(omit, true) }}"

- name: Ensure postgresql service is running with latest up to date configuration
  ansible.builtin.meta: flush_handlers

- name: Retrieve settings requiring a restart
  community.postgresql.postgresql_query:
    query: select name from pg_settings where pending_restart='true';
    # connection options
    ca_cert: "{{ postgresql_conn_vars.ca_cert | d(omit, true) }}"
    connect_params: "{{ postgresql_conn_vars.connect_params | d(omit, true) }}"
    login_host: "{{ postgresql_conn_vars.login_host | d(omit, true) }}"
    login_password: "{{ postgresql_conn_vars.login_password | d(omit, true) }}"
    login_unix_socket: "{{ postgresql_conn_vars.login_unix_socket | d(omit, true) }}"
    login_user: "{{ postgresql_conn_vars.login_user | d(omit, true) }}"
    login_port: "{{ postgresql_conn_vars.login_port | d(omit, true) }}"
    session_role: "{{ postgresql_conn_vars.session_role | d(omit, true) }}"
    ssl_cert: "{{ postgresql_conn_vars.ssl_cert | d(omit, true) }}"
    ssl_key: "{{ postgresql_conn_vars.ssl_key | d(omit, true) }}"
    ssl_mode: "{{ postgresql_conn_vars.ssl_mode | d(omit, true) }}"
  register: _postgresql_res_pending_params
  changed_when: postgresql_config_change_allow_restart and _postgresql_res_pending_params.rowcount > 0
  become: true
  become_user: "{{ postgresql_user }}"
  vars:
    ansible_ssh_pipelining: true
    ansible_python_interpreter: "{{ _postgresql_ansible_python_interpreter }}"

- name: Handle params requiring a full restart
  when: _postgresql_res_pending_params.rowcount > 0
  block:
    - name: Extract param names
      ansible.builtin.set_fact:
        _postgresql_pending_params_str: "'{{ _postgresql_res_pending_params.query_result | map(attribute='name') | list | join(',') }}'"

    - name: Display params awaiting restart
      ansible.builtin.debug:
        msg: >-
          [WARNING]: THE FOLLOWING CONFIGURATION PARAMETERS ARE PENDING A RESTART FOR THEIR NEW VALUES TO TAKE EFFECT:
          {{ _postgresql_pending_params_str }}.

          TO ENABLE A FULL SERVICE RESTART (WHICH MAY CAUSE DOWNTIME), ENSURE `postgresql_config_change_allow_restart` IS `true`.

    - name: Restart service
      when: postgresql_config_change_allow_restart
      ansible.builtin.service:
        name: "{{ _postgresql_daemon }}"
        state: restarted
