---
dependency:
  name: shell
  command: "${MOLECULE_SCENARIO_DIRECTORY}/tools/install-dependencies"

driver:
  name: docker

platforms:
  # On "${name:-${image:-debian}", the last brace does not miss, it works like that...
  # The env var should be used when the image variable refers to a full registry path like registry.access.redhat.com/ubi8/ubi
  - &cluster_node
    name: claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-1
    image: ${image:-debian}:${tag:-latest}
    privileged: true
    tty: true
    volumes:
      - "/sys/fs/cgroup:/sys/fs/cgroup:rw"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    stop_signal: "SIGRTMIN+3"
    capabilities:
      - SYS_ADMIN
      - SYS_TIME
      - LINUX_IMMUTABLE
    command: "/lib/systemd/systemd"
    cgroupns_mode: host
    networks:
      - name: ansible-role-postgresql-network-${name:-${image:-debian}-${tag:-latest}

  - &cluster_node_replica
    <<: *cluster_node
    name: claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-2
    groups:
      - replica

  - <<: *cluster_node_replica
    name: claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-3


provisioner:
  name: ansible
  env:
    ANSIBLE_FORCE_COLOR: "true"
    ANSIBLE_LOAD_CALLBACK_PLUGINS: "true"
    ANSIBLE_STDOUT_CALLBACK: "ansible.posix.debug"
    ANSIBLE_CALLBACKS_ENABLED: "ansible.posix.profile_tasks"
  options:
    v: true
  ansible_args:
    - -v
    - --tags=always,uninstall,install,init,autotune,config,repli,backup,user,tablespace,db,owner,ext,query
  inventory:
    group_vars:
      all:
        postgresql_global_config_options_extra:
          - option: log_statement
            value: 'all'
        postgresql_version: ${postgresql_version:-15}
        postgresql_debug: true
        # postgresql_replication_primary_dns: node1
        postgresql_replication_primary_dns: claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-1
        postgresql_replication_primary_port: 5432
        postgresql_replication_replica_dns:
          # - node2
          # - node3
          - claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-2
          - claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-3
      replica:
        postgresql_replication_role: replica
        postgresql_replication_create_slot: true
        # postgresql_replication_primary_inventory_name: node1
        postgresql_replication_primary_inventory_name: claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-1
    host_vars:
      # node1:
      claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-1:
        postgresql_replication_role: primary
        postgresql_replication_slots:
          - slot_name: replica1_slot
            slot_type: physical
            state: absent
          - slot_name: replica2_slot
            slot_type: physical
        postgresql_global_config_options_extra:
          - option: log_statement
            value: 'all'
          # - option: wal_keep_size
          #   value: 64
          # - option: max_replication_slots
          #   value: 10
      # node2:
      claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-2:
        postgresql_replication_slot: slot1
      # node3:
      claranet_postgresql_${name:-${image:-debian}-${tag:-latest}-${scenario:-default}${postgresql_version}-3:
        postgresql_replication_slot: slot2


verifier:
  name: ansible

lint: |
  set -e
  yamllint .
  ansible-lint
